//Game Of Life
//Joseph Dykstra
//01-15-2013


#include "+Menu.nxc"

#define TX      12
#define height  16
#define width   25
#define rndm  0
#define rset  1
#define modeMenu  true
#define modeDraw  true


byte area[width+2][height+2];


const byte gliderGun[36][9]=       //TOO LARGE!!!
 {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0}
  {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1}
  {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1}
  {1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  {1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0}
  {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}
  {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

const byte glider[3][5]=
 {{0,0,0,1,0}
  {0,0,0,0,1}
  {0,0,1,1,1}};
  
const byte lightWeightSpaceShip[5][4]=
 {{1,0,0,1,0}
  {0,0,0,0,1}
  {1,0,0,0,1}
  {0,1,1,1,1}};

const byte blinker[3][3]=
 {{0,1,0}
  {0,1,0}
  {0,1,0}};
  
  
void make(int INchoice)
  {
  if (INchoice==1)
    {
    for (int i=0; i<5; i++)
      {
      for (int j=0; j<9; j++)
        {
        area[i+1][j+1]=gliderGun[i][j];
        }
      }
    }
  else if (INchoice==2)
    {
    for (int i=0; i<3; i++)
      {
      for (int j=0; j<5; j++)
        {
        area[i+1][j+1]=glider[i][j];
        }
      }
    }
  else if (INchoice==3)
    {
    for (int i=0; i<5; i++)
      {
      for (int j=0; j<4; j++)
        {
        area[i+1][j+1]=lightWeightSpaceShip[i][j];
        }
      }
    }
  else if (INchoice==4)
    {
    for (int i=0; i<3; i++)
      {
      for (int j=0; j<3; j++)
        {
        area[i+1][j+1]=blinker[i][j];
        }
      }
    }
  }


void initArea(bool rsetRndm)
  {
  for (int i=0; i<height+2; i++)
    {
    for (int j=0; j<width; j++)
      {
      if (rsetRndm) area[j][i]=0;
      else          area[j][i]=Random(2);
      }
    }
  }


void draw(int INb)
  {
  for (int i=1; i<height+1; i++)
    {
    for (int j=1; j<width-1; j++)
      {
      if (modeDraw)
        {
        if (area[j][i]) RectOut((j-1)*INb,(i-1)*INb,INb,INb,32); //FILL
        else            RectOut((j-1)*INb,(i-1)*INb,INb,INb,36); //FILL+INVERT
        }
      else
        {
        NumOut((j-1)*INb,(i-1)*INb,(area[j][i]),0);
        }
      }
    }
  }


void stepForward()
  {
  int neighbors;
  for (int i=1; i<height+1; i++)
    {
    for (int j=1; j<width-1; j++)
      {
      neighbors=0;
      for (int k=-1; k<=1; k++)
        {
        //PlayTone(3000,100);Wait(125);
        for (int l=-1; l<=1; l++) //Counts itself
          {
          //if (k==0&&l==0) l++;
          if ( (area[j+l][i+k]==1) //If existent or going to be destroyed
            || (area[j+l][i+k]==2) ) neighbors++;
          }
        }
      /*SendResponseNumber(9,neighbors);
      Wait(60);*/
      if (area[j][i]) //LIVE CELL
        {
        if (neighbors<3)  area[j][i]=2; //Under population
        if (neighbors>4)  area[j][i]=2; //Over crowding
        }
      else            //DEAD CELL
        {
        if (neighbors==3) area[j][i]=3;  //Reproduction
        }
      }
    }
  for (int i=0; i<height+1; i++)
    {
    for (int j=0; j<width+1; j++)
      {
      if (area[j][i]>=2) area[j][i]-=2;
      }
    }
  }

//*
int startupMenu(int INmenu)
  {
  int mychoice;
  if (modeMenu)
    {
    string output[8]={"","","","","","","",""};
    output[0]="GAME OF LIFE";
    if (INmenu==0)
      {
      output[1]="Choose:";
      output[2]="Random";
      output[3]="GlidrGun";
      output[4]="Glider";
      output[5]="LtWtSpSh";
      output[6]="Misc";
      mychoice=menu(5, output, TX);
      }
    else if (INmenu==1)
      {
      output[1]="Speed:";
      output[2]="XtraFast";
      output[3]="Fast";
      output[4]="Medium";
      output[5]="Slow";
      mychoice=menu(4, output, TX);
      }
    else if (INmenu==2)
      {
      output[1]="Size:";
      output[2]="Small";
      output[3]="Medium";
      output[4]="Large";
      mychoice=menu(3, output, TX);
      }
    }
  else
    {
    if      (INmenu==0) mychoice=4; //Blinker
    else if (INmenu==1) mychoice=0; //XtraFast
    else if (INmenu==2) mychoice=2; //Large
    }
  ClearScreen();
  return mychoice;
  }
//*/

task main()
  {
  int choice[3];
  int waitTime;
  bool currArea=0;
  for (int i=0; i<3; i++) {choice[i]=startupMenu(i);}
  TextOut(32,20,"Loading",0);
  if (choice[0]==0)                  //If chose random
    {
    unsigned int ctick=CurrentTick();//Get current tick
    srand(ctick);                    //Seed randomizer
    initArea(rndm);                  //Randomize
    }
  else                         //If chose diff preset
    {
    initArea(rset);            //Reset area
    make(choice[0]);           //Create preset
    }
  waitTime=pow(10,choice[1]);
  const int blksz=(choice[2]*2+1);
  ClearScreen();
  SetLongAbort(false);
  Wait(1000);
  for (int gens=0; true; gens++)
    {
    draw(blksz);
    currArea=!currArea;
    stepForward();
    Wait(waitTime);
    }
  }
  
/*
neighbors+=(area[j-1][i-1]);
neighbors+=(area[j-1][i  ]);
neighbors+=(area[j-1][i+1]);
neighbors+=(area[j  ][i-1]);
neighbors+=(area[j  ][i+1]);
neighbors+=(area[j+1][i-1]);
neighbors+=(area[j+1][i  ]);
neighbors+=(area[j+1][i+1]);
*/

/*
const bool gliderGun[36][9]={
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0}
{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1}
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1}
{1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
{1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0}
{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}
{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
*/
