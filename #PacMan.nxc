//PacMan
#define x        0
#define y        1
#define d        2
#define bsz    8
#define width    12
#define height   08
#define right    12
#define up       08
#define left     12
#define down     08
#define enemynum 03

int score=0;
bool alive=true;
bool foodaround=true;
int e[enemynum][2];
int me[3];
int go[2]={1,0};
int board[width][height]=
  {                         //0=empty
  {3,3,3,3,3,3,3,3,3,3,3,3} //1=food
  {3,1,0,1,0,1,0,1,0,1,0,3} //2=me
  {3,0,1,0,1,0,1,0,1,0,1,3} //3=wall
  {3,1,0,0,3,3,0,3,3,1,0,3} //4=enemy1
  {3,0,1,1,3,4,8,6,3,0,1,3} //5=enemy1+food
  {3,1,0,0,3,3,3,3,3,1,0,3} //6=enemy2
  {3,0,1,0,1,2,1,0,1,0,1,3} //7=enemy2+food
  {3,3,3,3,3,3,3,3,3,3,3,3} //8=enemy3
  };                        //9=enemy3+food
  

void rescan()
  {
  int temp;
  foodaround=false;
  for (int j=0;j<height;j++)
    {
    for (int i=0;i<width;i++)
      {
      temp=board[j][i];
      if (temp==1) {foodaround=true;}
      if (temp==2) {me[x]=i; me[y]=j;}
      if (temp>=4)
        {
        temp=((temp-4)-(temp%2))/2;
        e[temp][x]=i;
        e[temp][y]=j;
        }
      }
    }
  }

void buttons()
  {
  go[x]=0;
  go[y]=0;
  if (ButtonPressed(BTNLEFT))   go[x]=-1;
  if (ButtonPressed(BTNRIGHT))  go[x]= 1;
  if (ButtonPressed(BTNCENTER)) go[y]= 1;
  if (ButtonPressed(BTNEXIT))   go[y]=-1;
  }


void step()
  {
  for (int i=0; i<enemynum; i++) //move enemies, if can, and check if on me
    {
    bool inloop=true;
    for (int j=0; j<8 && inloop; j++)
      {
      e[d][i]=Random(4);
      if      (e[d][i]==right)
        {
        if (e[x][i]==me[x] && e[y][i]==me[y]) {}
        
        }
      else if (e[d][i]==up)    {}
      else if (e[d][i]==left)  {}
      else if (e[d][i]==down)  {}
      }
    }
  }

  
void drawBoard()
  {
  for (int j=0;j<height;j++)
    {
    for (int i=0;i<width;i++)
      {
      if (board[j][i]%2)  { PointOut(i*bsz+bsz/2, j*bsz+bsz/2,          0);}  //food
      if (board[j][i]==2) {CircleOut(i*bsz+bsz/2, j*bsz+bsz/2, bsz,     0);}  //me
      if (board[j][i]==3) {  RectOut(i*bsz,       j*bsz, bsz,  bsz,    32);}  //wall
      if (board[j][i]>=4) {CircleOut(i*bsz+bsz/2, j*bsz+bsz/2, bsz/2-1,32);}  //enemy
      }
    }
  }
  

    
task main()
  {
  for (score=0; foodaround && alive; score++)
    {
    rescan();
    buttons();
    int moveX=me[x]+go[x];
    int moveY=me[y]+go[y];
    int moveOnto=board[moveX][moveY];
    if (moveOnto<2)
      {
      board[me[x]][me[y]]=0;
      board[moveX][moveY]=2;
      me[x]=moveX;
      me[y]=moveY;
      score+=moveOnto;
      }
    else if (moveOnto>2) alive=false;
    step();
    drawBoard();
    }
  TextOut(0,LCD_LINE1,"Game Over",0);
  TextOut(0,LCD_LINE2,"Score="+NumToStr(score),0);
  }
  
  
/*
//UNENHANCED FIRMWARE
{
if (abs(go[y])==1) {go[y]*=-1;} //toggle up/down
else {go[x]=1; go[y]=0;}
}
*/
