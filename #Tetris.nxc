//Tetris
//Joseph Dykstra


/*                 DEFINES                */
#include "+Button+-.nxc"
#define blocksize  4
#define width   10
#define height  25
#define waitLR     100
#define TX      35
#define Itet 0
#define Jtet 1
#define Ltet 2
#define Otet 3
#define Stet 4
#define Ttet 5
#define Ztet 6
#define prob 7


/*            GLOBAL CONSTANTS            */
const int I[8]=
 {0,0,0,0,
  0,1,2,3};
const int J[8]=
 {1,1,1,0,
  0,1,2,2};
const int L[8]=
 {0,0,0,1,
  0,1,2,2};
const int O[8]=
 {0,0,1,1,
  0,1,0,1};
const int S[8]=
 {2,1,1,0,
  0,0,1,1};
const int T[8]=
 {0,1,1,1,
  1,0,1,2};
const int Z[8]=
 {0,1,1,2,
  0,0,1,1};


/*            GLOBAL VARIABLES            */
string accesshigh;
int gametype;
int gamespeed;
int delaytime;
float speedup;
int prevC=0;
int prevE=0;
bool moveL;
bool moveR;
bool rotate;
bool drop;
int currentPiece=-1;
int comingPiece;
int fullRowArray[4]={-1,-1,-1,-1};

bool area[width][height];
int chnc[7];


/*               SUBROUTINES              */
void selectGame()
  {
  accesshigh="Snake";
  while (ButtonPressed(BTNRIGHT)==false)
    {
    gametype=senseButton(gamespeed,false,1,2,false);
    ClearScreen();
    TextOut(TX,LCD_LINE1,"TETRIS", 0);
    TextOut(2, LCD_LINE2,"Speed:", 0);
    TextOut(2, LCD_LINE3,"Slow",   0);
    TextOut(2, LCD_LINE4,"Medium", 0);
    TextOut(2, LCD_LINE5,"Fast",   0);
    TextOut(88,LCD_LINE8,"OK",     0);
    RectOut(0,40-(gamespeed*8),49,8,0);
    Wait(50);
    }
  TextOut(TX,LCD_LINE1,"TETRIS",  0);
  until (ButtonPressed(BTNRIGHT)==false) {}
  while (ButtonPressed(BTNRIGHT)==false)
    {
    gametype=senseButton(gametype,false,1,3,false);
    ClearScreen();
    TextOut(TX,LCD_LINE1,"TETRIS",   0);
    TextOut(2, LCD_LINE2,"Type:",    0);
    TextOut(2, LCD_LINE3,"Giveaway", 0);
    TextOut(2, LCD_LINE4,"Simple",   0);
    TextOut(2, LCD_LINE5,"Normal",   0);
    TextOut(2, LCD_LINE6,"Hard",     0);
    TextOut(2, LCD_LINE7,"Death",    0);
    TextOut(88,LCD_LINE8,"OK", 0);
    RectOut(0,40-(gametype*8),49,8,0);
    Wait(50);
    }
  TextOut(TX,LCD_LINE1,"TETRIS",  0);
  until (ButtonPressed(BTNRIGHT)==false) {}
  //
  if      (gamespeed==0)
    {
    accesshigh=StrCat(accesshigh,"Slow");
    speedup=0.975;
    delaytime=800;
    }
  else if (gamespeed==1)
    {
    accesshigh=StrCat(accesshigh,"Med");
    speedup=0.9375;
    delaytime=600;
    }
  else if (gamespeed==2)
    {
    accesshigh=StrCat(accesshigh,"Fast");
    speedup=0.9;
    delaytime=400;
    }
  
  if      (gametype==0)
    {
    accesshigh=StrCat(accesshigh,"Give.dat");
    chnc[prob]=7;
    chnc[Itet]=2;
    chnc[Jtet]=1;
    chnc[Ltet]=1;
    chnc[Otet]=2;
    chnc[Stet]=0;
    chnc[Ttet]=1;
    chnc[Ztet]=0;
    }
  else if (gametype==1)
    {
    accesshigh=StrCat(accesshigh,"Simp.dat");
    chnc[prob]=12;
    chnc[Itet]=3;
    chnc[Jtet]=1;
    chnc[Ltet]=1;
    chnc[Otet]=3;
    chnc[Stet]=1;
    chnc[Ttet]=2;
    chnc[Ztet]=1;
    }
  else if (gametype==2)
    {
    accesshigh=StrCat(accesshigh,"Norm.dat");
    chnc[prob]=7;
    chnc[Itet]=1;
    chnc[Jtet]=1;
    chnc[Ltet]=1;
    chnc[Otet]=1;
    chnc[Stet]=1;
    chnc[Ttet]=1;
    chnc[Ztet]=1;
    }
  else if (gametype==3)
    {
    accesshigh=StrCat(accesshigh,"Hard.dat");
    chnc[prob]=21;
    chnc[Itet]=2;
    chnc[Jtet]=3;
    chnc[Ltet]=3;
    chnc[Otet]=2;
    chnc[Stet]=4;
    chnc[Ttet]=3;
    chnc[Ztet]=4;
    }
  else if (gametype==4)
    {
    accesshigh=StrCat(accesshigh,"Death.dat");
    chnc[prob]=19;
    chnc[Itet]=1;
    chnc[Jtet]=3;
    chnc[Ltet]=3;
    chnc[Otet]=2;
    chnc[Stet]=4;
    chnc[Ttet]=2;
    chnc[Ztet]=4;
    }
  ClearScreen();
  }


void getInput()
  {
  if (ButtonPressed(BTNLEFT))
    {drop=true;}
  if (ButtonPressed(BTNRIGHT))
    {rotate=true;}
  if (ButtonPressed(BTNCENTER))
    {
    if (prevC==0)
      {
      moveL=true;
      }
    prevC++;
    if (prevC<waitLR)
      {prevC=0;}
    }
  if (ButtonPressed(BTNEXIT))
    {
    if (prevE==0)
      {
      moveR=true;
      }
    prevE++;
    if (prevE<waitLR)
      {prevE=0;}
    }
  }
  

void pieceCreate()
  {
  comingPiece=currentPiece;
  int rndm;
  int create=0;
  rndm=Random(chnc[prob]);
  for (int i=0; (i<Ztet)&&(create==0); i++)
    {
    if (rndm<chnc[i])
      {create=i;}
    }
  currentPiece=create;
  }
  
  
bool checkFullRows()
  {
  bool anyFullRows=false;
  //ADD CODE HERE
  return anyFullRows;
  }


task main()
  {
  SetLongAbort(true);
  bool playagain, alive, piecemoving;

  playagain=true;
  while (playagain)
    {
    selectGame();

    alive=true;
    while (alive)
      {
      pieceCreate();
      piecemoving=true;
      while (piecemoving)
        {
        for (int i=0;i<delaytime;i++) //waiting
          {
          getInput();
          Wait(10);
          }
        //do output
        //debugging
        }
      if (checkFullRows()) //rows filled
        {
        //destroy them
        //add to score
        //move higher rows down
        }
      }
    //play again?
    }
  }
  
  
  
  
